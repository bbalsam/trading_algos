#GANDALPH LONG SHORT CANDLESTICK STRATEGY
#===============================================================================
#
#===============================================================================

#===============================================================================
#DEFAULTS:
#input exitLength = 8;
#input exitGainLength = 6;
#===============================================================================

#GANDALPH INPUTS
input LExitLength = 2;
input LExitGainLength = 3;
input SExitLength = 2;
input SExitGainLength = 3;
input tradeNum = 5;
input StopNum = 1;

#CANDLESTICK INPUTS
#hint atrMult: Multiplier of avg. true range.
input atrMult = 3.0;
#hint atrType: Moving average type of ATR.
input atrType = AverageType.EXPONENTIAL;
#hint shift: Offsets the data this many bars.
input shift = 1;
#hint n: lookback length for highest highs, lowest lows.
input n = 15;

#===============================================================================
#COMMON DEFINITIONS
#===============================================================================

def averagePrice = ohlc4;
def medianPrice = hl2;
def medianBodyPrice = MidBodyVal();


def entryPrice = EntryPrice();
def priceChangeSinceEntry = close - entryPrice;
def afterEntryCount = if IsNaN(entryPrice[1]) and !IsNaN(entryPrice) then 1 else if !IsNaN(entryPrice) then afterEntryCount[1] + 1 else Double.NaN;

#Def below for candlestick
def atr = MovingAverage(atrType, TrueRange(high, close, low)) * atrMult;
def smax = Lowest(low, n)[shift] + atr[shift];
def smin = Highest(high, n)[shift] - atr[shift];
def dir = compoundValue(1, if close > smax[1] then 1 else if close < smin[1] then -1 else dir[1], 0);
def orderDir = dir;
def isOrder = orderDir crosses 0;
def rUB = compoundValue(1, if dir > 0 then if smax > rUB[1] then smax else rUB[1] else if dir < 0 then if smax < rUB[1] then smax else rUB[1] else rUB[1], high);
def rLB = compoundValue(1, if dir < 0 then if smin < rLB[1] then smin else rLB[1] else if dir > 0 then if smin > rLB[1] then smin else rLB[1] else rLB[1], low);


#===============================================================================
#LONG
#===============================================================================

def LongEntryGandaldfPattern = ((averagePrice[1] < medianPrice[1] and
    medianPrice[2] <= averagePrice[1] and
    medianBodyPrice[2] <= averagePrice[3]) or
    (averagePrice[1] < medianPrice[3] and
    medianBodyPrice < medianPrice[2] and
    medianBodyPrice[1] < medianBodyPrice[2])) and
	(dir > 0);

def LongExitGandalfPattern = (averagePrice[1] < medianBodyPrice[1] and
    medianPrice[2] == medianBodyPrice[3] and
    medianBodyPrice[1] <= medianBodyPrice[4]) or
    (averagePrice[2] < medianBodyPrice and
    medianPrice[4] <= averagePrice[3] and
    medianBodyPrice[1] <= averagePrice[1]);
	
AddOrder(OrderType.BUY_TO_OPEN, LongEntryGandaldfPattern and open > rLB, tradeSize = tradeNum, tickcolor = GetColor(1), arrowcolor = GetColor(1), name = "BUY");
AddOrder(OrderType.SELL_TO_CLOSE, afterEntryCount > LExitLength, tickcolor = GetColor(2), arrowcolor = GetColor(2), name = "TLX"); # check name
AddOrder(OrderType.SELL_TO_CLOSE, LongExitGandalfPattern and priceChangeSinceEntry < 0, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "GLX");
AddOrder(OrderType.SELL_TO_CLOSE, afterEntryCount > LExitGainLength and priceChangeSinceEntry > 0, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "TGLX");

#===============================================================================
#SHORT
#===============================================================================
def ShortEntryGandaldfPattern = ((averagePrice[1] > medianPrice[1] and
    medianPrice[2] >= averagePrice[1] and
    medianBodyPrice[2] >= averagePrice[3]) or
    (averagePrice[1] > medianPrice[3] and
    medianBodyPrice > medianPrice[2] and
    medianBodyPrice[1] > medianBodyPrice[2])) and
	(dir < 0);

def ShortExitGandalfPattern = (averagePrice[1] > medianBodyPrice[1] and
    medianPrice[2] == medianBodyPrice[3] and
    medianBodyPrice[1] >= medianBodyPrice[4]) or
    (averagePrice[2] > medianBodyPrice and
    medianPrice[4] >= averagePrice[3] and
    medianBodyPrice[1] >= averagePrice[1]);

AddOrder(OrderType.SELL_TO_OPEN, ShortEntryGandaldfPattern and open < rLB, tradeSize = tradeNum,tickcolor = GetColor(1), arrowcolor = GetColor(1), name = "SELL");
AddOrder(OrderType.BUY_TO_CLOSE, afterEntryCount > SExitLength, tickcolor = GetColor(2), arrowcolor = GetColor(2), name = "TSX"); # check name
AddOrder(OrderType.BUY_TO_CLOSE, ShortExitGandalfPattern and priceChangeSinceEntry > 0, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "GSX");
AddOrder(OrderType.BUY_TO_CLOSE, afterEntryCount > SExitGainLength and priceChangeSinceEntry > 0, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "TGSX");
AddOrder(OrderType.BUY_TO_CLOSE, priceChangeSinceEntry >= StopNum, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "SSX");
